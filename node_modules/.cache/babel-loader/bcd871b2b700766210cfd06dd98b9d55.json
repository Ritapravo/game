{"ast":null,"code":"var _jsxFileName = \"/home/ritapravo/Desktop/React_Practice/my-game/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Intro from './components/Intro';\nimport Board from './components/Board';\nimport Button from './components/Button';\nimport { x_val, y_val, check } from './functions';\nimport Counter from './components/Counter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let speed = 400;\n  var intervalId1;\n  const [turn, setTurn] = useState(true);\n  const [dice_val, setDice_val] = useState(\"...\");\n  const [space_enabled, setSpace_enabled] = useState(true);\n  const [enter_enabled, setEnter_enabled] = useState(false);\n  const [player1, setPlayer1] = useState({\n    x: 1,\n    y: 4,\n    z: 96\n  });\n  const [player2, setPlayer2] = useState({\n    x: 10,\n    y: 1,\n    z: 1\n  });\n\n  const rollDice = () => {\n    setDice_val(Math.round(1 + 5 * Math.random()));\n    setEnter_enabled(true);\n  };\n\n  const move1 = setCounter => {\n    let z = player1.z + dice_val;\n    let c = check(z);\n    if (!turn || !enter_enabled) return;\n\n    if (z <= 100) {\n      // intervalId1 = setInterval(lets_move1, speed, player1.z+dice_val);\n      // intervalId1=setInterval(()=>{console.log(z);}, speed*2.5)\n      setPlayer1({\n        x: x_val(z),\n        y: y_val(z),\n        z: z\n      });\n\n      if (z === 100) {\n        setTimeout(() => {\n          alert(\"Green has won the match!! Refresh to Restart.\");\n        }, speed);\n      }\n\n      if (c) {\n        setTimeout(() => {\n          setPlayer1({\n            x: x_val(c),\n            y: y_val(c),\n            z: c\n          });\n          setCounter(c);\n        }, speed);\n      }\n    } // console.log(turn);\n\n\n    setEnter_enabled(false);\n    setSpace_enabled(true);\n    setTurn(false);\n    setDice_val(\"...\");\n  };\n\n  const move2 = () => {\n    let z = player2.z + dice_val;\n    let c = check(z);\n    if (turn || !enter_enabled) return;\n\n    if (z <= 100) {\n      setPlayer2({\n        x: x_val(player2.z + dice_val),\n        y: y_val(player2.z + dice_val),\n        z: player2.z + dice_val\n      });\n\n      if (z == 100) {\n        setTimeout(() => {\n          alert(\"Red has won the match!! Refresh to Restart.\");\n        }, speed);\n      }\n\n      if (c) {\n        setTimeout(() => {\n          setPlayer2({\n            x: x_val(c),\n            y: y_val(c),\n            z: c\n          });\n        }, speed);\n      }\n    }\n\n    setEnter_enabled(false);\n    setSpace_enabled(true);\n    setTurn(true);\n    setDice_val(\"...\");\n  };\n\n  const Clicked = () => {\n    if (space_enabled) {\n      setSpace_enabled(false);\n      rollDice();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Intro, {\n      turn: turn,\n      dice_val: dice_val\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      turn: turn,\n      enter_enabled: enter_enabled,\n      player1: player1,\n      player2: player2,\n      move1: move1,\n      move2: move2,\n      dice_val: dice_val\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      turn: turn,\n      dice_val: dice_val,\n      onClickRollDice: Clicked\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AHZN3fehsev1aktX2U2f8dXnr08=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ritapravo/Desktop/React_Practice/my-game/src/App.js"],"names":["React","useState","Intro","Board","Button","x_val","y_val","check","Counter","App","speed","intervalId1","turn","setTurn","dice_val","setDice_val","space_enabled","setSpace_enabled","enter_enabled","setEnter_enabled","player1","setPlayer1","x","y","z","player2","setPlayer2","rollDice","Math","round","random","move1","setCounter","c","setTimeout","alert","move2","Clicked"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\nimport Intro from './components/Intro';\nimport Board from './components/Board';\nimport Button from './components/Button';\nimport {x_val, y_val, check} from './functions';\nimport Counter from './components/Counter';\n\nfunction App() {\n  let speed = 400;\n  var intervalId1;\n  const [turn, setTurn] = useState(true);\n  const [dice_val, setDice_val] = useState(\"...\");\n  const [space_enabled, setSpace_enabled] = useState(true);\n  const [enter_enabled, setEnter_enabled] = useState(false);\n  const [player1, setPlayer1] = useState({x:1, y:4, z:96});\n  const [player2, setPlayer2] = useState({x:10, y:1, z:1});\n  \n  const rollDice = ()=>{\n    setDice_val(Math.round(1+(5)*Math.random()));\n    setEnter_enabled(true);\n  }\n\n  const move1 = (setCounter) =>{\n    let z = player1.z+dice_val;\n    let c = check(z);\n    if(!turn || !enter_enabled) return;\n\n    if(z<=100){ \n      // intervalId1 = setInterval(lets_move1, speed, player1.z+dice_val);\n      // intervalId1=setInterval(()=>{console.log(z);}, speed*2.5)\n      setPlayer1({\n        x: x_val(z),\n        y: y_val(z),\n        z: z\n      });\n      if(z===100){\n        setTimeout(() => {\n          alert(\"Green has won the match!! Refresh to Restart.\");\n        }, speed);\n      }\n      if(c){\n        setTimeout(() => {\n          setPlayer1({\n            x: x_val(c),\n            y: y_val(c),\n            z: c\n          });\n          setCounter(c);\n        }, speed);\n      }\n    }\n    // console.log(turn);\n    setEnter_enabled(false);\n    setSpace_enabled(true);\n    setTurn(false);\n    setDice_val(\"...\");\n  }\n  const move2 = () =>{\n    let z = player2.z+dice_val;\n    let c = check(z);\n    if(turn || !enter_enabled)return;\n    if(z<=100){\n      setPlayer2({\n        x: x_val(player2.z + dice_val),\n        y: y_val(player2.z + dice_val),\n        z: player2.z + dice_val\n      });\n      if(z==100){\n        setTimeout(() => {\n          alert(\"Red has won the match!! Refresh to Restart.\");\n        }, speed);\n      }\n      if(c){\n        setTimeout(() => {\n          setPlayer2({\n            x: x_val(c),\n            y: y_val(c),\n            z: c\n          });\n        }, speed);\n      }\n    } \n    setEnter_enabled(false);\n    setSpace_enabled(true);\n    setTurn(true);\n    setDice_val(\"...\");\n  }\n\n  const Clicked = () => {\n    if(space_enabled){\n      setSpace_enabled(false);\n      rollDice();      \n    }\n  }\n\n  return (\n    <div>\n      <Counter/>\n      <Intro turn={turn} dice_val={dice_val}/>\n      <Board \n        turn={turn} \n        enter_enabled={enter_enabled} \n        player1={player1} \n        player2={player2}\n        move1={move1}\n        move2={move2}\n        dice_val={dice_val}\n      />\n      <Button turn={turn} dice_val={dice_val} onClickRollDice={Clicked}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}