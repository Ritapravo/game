{"ast":null,"code":"const x_val = z => {\n  // x_val(z) takes the z co-ordinate as input and returns its corresponding \n  // value of 'x'\n  return 10 - Math.floor((z - 1) / 10);\n};\n\nconst y_val = z => {\n  // y_val(z) takes the z co-ordinate as input and returns its corresponding \n  // value of 'y'\n  let temp = Math.floor((z - 1) / 10);\n\n  if (temp % 2 === 0) {\n    if (z % 10 == 0) return 10;\n    return z % 10;\n  } else {\n    if (z % 10 == 0) return 1;\n    return 11 - z % 10;\n  }\n};\n\nconst move_green = (v, setCounter) => {\n  let z = v.player1 + v.dice_val;\n  let c = check(z);\n  if (!v.turn || !v.enter_enabled) return;\n\n  if (z <= 100) {\n    v.setPlayer1(z);\n\n    if (z === 100) {\n      setTimeout(() => {\n        alert(\"Green has won the match!! Refresh to Restart.\");\n      }, v.speed);\n    }\n\n    if (c) {\n      setTimeout(() => {\n        v.setPlayer1(c);\n        setCounter(c);\n      }, v.speed);\n    }\n  }\n\n  v.setEnter_enabled(false);\n  v.setSpace_enabled(true);\n  v.setTurn(false);\n  v.setDice_val(\"...\");\n};\n\nconst move_red = (v, setCounter) => {\n  let z = v.player2 + v.dice_val;\n  let c = check(z);\n  if (turn || !enter_enabled) return;\n\n  if (z <= 100) {\n    setPlayer2(z);\n\n    if (z == 100) {\n      setTimeout(() => {\n        alert(\"Red has won the match!! Refresh to Restart.\");\n      }, speed);\n    }\n\n    if (c) {\n      setTimeout(() => {\n        setPlayer2(c);\n        setCounter(c);\n      }, speed);\n    }\n  }\n\n  setEnter_enabled(false);\n  setSpace_enabled(true);\n  setTurn(true);\n  setDice_val(\"...\");\n};\n\nconst check_map = new Map([[7, 25], [19, 39], [41, 18], [47, 16], [46, 68], [60, 79], [72, 13], [73, 94], [87, 56], [95, 76], [99, 27]]);\n\nconst check = z => {\n  if (check_map.has(z)) return check_map.get(z);else {\n    return 0;\n  }\n};\n\nexport { x_val, y_val, check, move_green };","map":{"version":3,"sources":["/home/ritapravo/Desktop/React_Practice/my-game/src/functions.js"],"names":["x_val","z","Math","floor","y_val","temp","move_green","v","setCounter","player1","dice_val","c","check","turn","enter_enabled","setPlayer1","setTimeout","alert","speed","setEnter_enabled","setSpace_enabled","setTurn","setDice_val","move_red","player2","setPlayer2","check_map","Map","has","get"],"mappings":"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","sourcesContent":["\n\nconst x_val = (z) => {\n    // x_val(z) takes the z co-ordinate as input and returns its corresponding \n    // value of 'x'\n    return 10-Math.floor((z-1)/10);\n} \n\n\nconst y_val = (z) => {\n    // y_val(z) takes the z co-ordinate as input and returns its corresponding \n    // value of 'y'\n    let temp = Math.floor((z-1)/10);\n    if(temp%2===0){\n        if(z%10==0)\n            return 10;\n        return z%10;\n    }\n    else{\n        if(z%10==0)\n            return 1;\n        return 11-z%10;\n    }\n} \n\n\nconst move_green = (v, setCounter) =>{\n    let z = v.player1 + v.dice_val;\n    let c = check(z);\n    if(!v.turn || !v.enter_enabled) return;\n\n    if(z<=100){ \n      v.setPlayer1(z);\n      if(z===100){\n        setTimeout(() => {\n          alert(\"Green has won the match!! Refresh to Restart.\");\n        }, v.speed);\n      }\n      if(c){\n        setTimeout(() => {\n          v.setPlayer1(c);\n          setCounter(c);\n        }, v.speed);\n      }\n    }\n    \n    v.setEnter_enabled(false);\n    v.setSpace_enabled(true);\n    v.setTurn(false);\n    v.setDice_val(\"...\");\n}\n\n\nconst move_red = (v, setCounter) =>{\n    let z = v.player2 + v.dice_val;\n    let c = check(z);\n    if(turn || !enter_enabled)return;\n    if(z<=100){\n      setPlayer2(z);\n      if(z==100){\n        setTimeout(() => {\n          alert(\"Red has won the match!! Refresh to Restart.\");\n        }, speed);\n      }\n      if(c){\n        setTimeout(() => {\n          setPlayer2(c);\n          setCounter(c);\n        }, speed);\n      }\n    } \n    setEnter_enabled(false);\n    setSpace_enabled(true);\n    setTurn(true);\n    setDice_val(\"...\");\n  }\n\n\n\nconst check_map = new Map([\n    [7,25],\n    [19,39],\n    [41,18],\n    [47,16],\n    [46,68],\n    [60,79],\n    [72,13],\n    [73,94],\n    [87,56],\n    [95,76],\n    [99,27]\n]);\n\nconst check = (z) =>{\n    if(check_map.has(z))\n        return check_map.get(z);\n    else {\n        return 0;\n    }\n}\n\n\nexport  {x_val,y_val, check, move_green};"]},"metadata":{},"sourceType":"module"}